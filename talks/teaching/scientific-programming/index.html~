<!doctype html>
<html lang="en">

	<head>
		<meta charset="utf-8">

		<title>Lecture: Scientific Programming</title>

		<meta name="description" content="">
		<meta name="author" content="Johanna K S Tiemann">

		<meta name="apple-mobile-web-app-capable" content="yes">
		<meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">

		<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">

		<link rel="stylesheet" href="css/reveal.css">
		<link rel="stylesheet" href="css/theme/black.css" id="theme">

		<!-- Theme used for syntax highlighting of code -->
		<link rel="stylesheet" href="lib/css/zenburn.css">

		<!-- Printing and PDF exports -->
		<script>
			var link = document.createElement( 'link' );
			link.rel = 'stylesheet';
			link.type = 'text/css';
			link.href = window.location.search.match( /print-pdf/gi ) ? 'css/print/pdf.css' : 'css/print/paper.css';
			document.getElementsByTagName( 'head' )[0].appendChild( link );
		</script>

		<!--[if lt IE 9]>
		<script src="lib/js/html5shiv.js"></script>
		<![endif]-->
	</head>

	<body>

		<div class="reveal">

			<!-- Any section element inside of this container is displayed as a slide -->
			<div class="slides">
				<section>
					<section>
						<h1>Scientific Programming</h1>
						<p><small>WS 2019</a></small></p>
						<p><small>Johanna K.S. Tiemann (AG Hildebrand)</a></small></p>
					</section>
					<section>
						<h2>Motivation</h2>
						<ul>
							<li>efficient</li>
							<li>possible</li>
							<li>reproducible</li>
							<li>easy</li>
						</ul>
					</section>
					<section>
						<h2>10 simple rules</h2>
						<ul>
							<ol>Begin with the end in mind</ol>
							<ol>Baby steps are steps</ol>
							<ol>Immersion is the best learning tool</ol>
							<ol>Phone a friend</ol>
							<ol>Learn how to ask questions</ol>
							<ol>Don't reinvent the wheel</ol>
							<ol>Develop good habits early on</ol>
							<ol>Practice makes perfect</ol>
							<ol>Reach yourself</ol>
							<ol>Just do it</ol>
						</ul>
					</section>
					<section>
						<h2>Programming etiquette</h2>
						<ul>
							<li>usa a version-control system</li>
							<li>track your materials</li>
							<li>write testable software</li>
							<li>test your software</li>
							<li>share your software</li>
							<li>COMMENT!!!</li>
						</ul>
					</section>
				</section>
				<section>
					<h2>Outline</h2>
					<ol>
						<li><a href="#/2">UNIX</a></li>
						<li><a href="#/3">Text Editors</a></li>
						<li><a href="#/4">Computer programming</a></li>
						<li><a href="#/5">Data Visualization</a></li>
					</ol>
				</section>
				<section>
					<section>
						<h2>UNIX</h2>
						<ul>
							<li>What's an Operating System & what's UNIX?</li>
							<li>What's the kernel, shell, programs?</li>
							<li>Basic commands</li>
						</ul>
					</section>
					<section>
						<h2>What's an Operating System & what's UNIX?</h2>
						<ul>
							<p>Operating System (OS) = set of programs used to perform basic tasks &  connects between software & hardware</p>
							<p>Operating System (OS) = e.g. Windows, Mac (OS X), Linux (e.g. Ubuntu)</p>
							<p>UNIX: not always with graphical interfaces with always with command prompt</p>
						</ul>
					</section>
					<section>
						<h2>What's the kernel, shell, programs?</h2>
						<p>Kernel: program responsible for controlling hardware</p>
						<p>Shell: connection between user & kernel</p>
						<p>Programs: set of instructions</p>
					</section>
					<section>
						<h2>Basic commands</h2>
						<p>echo, ls, cd, mkdir, cat, cp, mv, rm, head, tail, history, diff, sleep, kill, ps</p>
						<p> ~ .., tab, Ctrl+r, >, var=3, $</p>
						<p>Here comes an example:</p>
						<pre><code class="shell" data-trim contenteditable>
$ ls /
bin   etc   lib64       mnt   root  share  tmp
boot  home  lost+found  opt   run   srv    usr
dev   lib   media       proc  sbin  sys    var
						</code></pre>
					</section>
				</section>
				<section>
					<section>
						<h2>Text Editors</h2>
						<ul>
							<li>vim/emacs/vi/...: :q, :q!</li>
							<li>gedit, Notepadd++, Sublime Text</li>
							<li>IDE (Integrated development environment:</li>
							<ul>
								<li>(Microsoft) Visual Studio</li>
								<li>Eclipse</li>
								<li>NetBeans</li>
								<li>Atom</li>
							</ul>
							<li>HTML editors: Atom, Bluefish, CudaText, WebStorm, SeaMonkey, oXygenXML, Dreamweaver, ...</li>
						</ul>
					</section>
				</section>
				<section>
					<section>
						<h2>Computer programming</h2>
						<ol>
							<li>Introduction or what is Python?</li>
							<li>Basic usage</li>
							<li>Data Type & Operators</li>
							<li>Input & Output</li>
							<li>Lists & Dictionary</li>
							<li>Writing scripts</li>
							<li>is Statements & Loops</li>
							<li>Function, Classes and Modules</li>
						</ol>
					</section>
					<section>
						<h2>Introduction or what is Python?</h2>
						<pre><code class="hljs" data-trim contenteditable>
1111111010001010100110001000110000000010000000100000001010010
1001001000000101011101101111011100100110110001100100000010100
0000000000000001100000000000000010000000000000000000000001000
0000000000010000001000001101000000000000000000000000000000000
0000000010000000000000000000000000011001101100000001110101101
0010000000000000000000100000000000101000000000000000010100000
0010000000000000000010000000000000000000000000000000000000000
0000000000000000000000010000000000001000000100000000000100000
0000001000000100010100010000000000000000000000000101000100000
0000000000000000000000001010000000000000000000000000000000000
						</code></pre>
						<aside class="notes">
							Machine Language, bits
						</aside>
						<p>Programming language converts human instructions into bits (machine language)</p>
						<p>Python: easy & powerful</p>
					</section>
					<section>
						<h2>Basic usage</h2>
						<pre><code class="python" data-trim contenteditable>
$ python
Python 2.7.12 (default, Dec  4 2017, 14:50:18) 
[GCC 5.4.0 20160609] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>> 
						</code></pre>
					</section>
					<section>
						<h2>Data Type & Operators</h2>
						<pre><code class="python" data-trim contenteditable>
>>> 3 + 7
10
>>> 15 / 3 * 5
25
>>> 5.0 / 2.0 # vs 5 / 2
						</code></pre>
						<ul>
							<li>Math operators: +, -, *, /, **, %, ==, >, <, !=, <= </li>
							<li>Strings: 'Hello', "4+7" * 3, "Mixing 'up' " + "quotes"</li>
							<li>Variables</li>
							<li>Booleans: True, False, 0, 1</li>
							<li>Functions: abs(), int(), float(), str(), len(), type(), print, ...</li>
						</ul>
						<pre><code class="python" data-trim contenteditable>
>>> help(len)
Help on built-in function len in module __builtin__:
len(...)
    len(object) -> integer
    Return the number of items of a sequence or collection.
						</code></pre>
					</section>
					<section>
						<h2>Input & Output</h2>
						<pre><code class="python" data-trim contenteditable>
>>> # display the contents of myvar
>>> print myvar
>>> # prompt the user for input with the string prompt
>>> raw_input(prompt)
>>> # open filename in mode, & store its reference in myfile
>>> myfile = open(filename, mode)
>>> # write output to myfile
>>> myfile.write(output)
>>> # store the contents of myfile in input
>>> input = myfile.read()
						</code></pre>
					</section>
					<section>
						<h2>Lists</h2>
						<pre><code class="Python" data-trim contenteditable>
>>> mylist = ['abc', 'def', 'ABC', 'DEF']
>>> print(mylist)
['abc', 'def', 'ABC', 'DEF']
>>> mylist[2]
'ABC'
>>> mylist[:-1]
'abc', 'def', 'ABC'
>>> mylist + 'string'
'abc', 'def', 'ABC', 'DEF', 's', 't', 'r', 'i', 'n', 'g'
>>> len(mylist[:-1])
3
>>> range(4)
[0,1,2,3]
>>> for index, item in enumerate(mylist):
...     print index, item
						</code></pre>
					</section>
					<section>
						<h2>Dictionary</h2>
						<pre><code class="python" data-trim contenteditable>
>>> mydict = { 'one' : 1, 'two' : 2,
... 'three' : 3,
... 'four' : 4,
... 'five' : 5
... }
>>> mydict['three'] # vs mydict[3]
						</code></pre>
						<ol>
							<ul>dict.keys()</ul>
						</ol>
					</section>

					<section>
						<h2>Writing scripts</h2>
						<pre><code class="python" data-trim contenteditable>
#!/usr/bin/python

prompt = 'What is your name? '
name = raw_input(prompt)
greeting = "Hello, " + name
print greeting
						</code></pre>
						<pre><code class="shell" data-trim contenteditable>
$ python greets.py
What is your name? Crazy Cat
Hellow Crazy Cat
$
						</code></pre>
					</section>
					<section>
						<h2>is Statements</h2>
						<pre><code class="python" data-trim contenteditable>
if condition:
    # Do this when the
    # condition is True
else:
    # Do this when the
    # condition is False
						</code></pre>
						<ol>
							<ul>if, else, elif, and, or</ul>
						</ol>
					</section>
					<section>
						<h2>Loops</h2>
						<pre><code class="python" data-trim contenteditable>
while condition:
    # Process that is done while the
    # condition is True
						</code></pre>
						<ol>
							<ul>Troubleshooting: Infinite Loops</ul>
							<ul>continue, pass, break</ul>
							<ul>+=, -=, *=, /=, ...</ul>
						</ol>
					</section>
					<section>
						<h2>Loops</h2>
						<pre><code class="python" data-trim contenteditable>
for item in mylist:
    print item
						</code></pre>
					</section>
					<section>
						<h2>Function</h2>
						<pre><code class="python" data-trim contenteditable>
f(x, y) = x + y
f(1, 2) = 3

def function_name():
    # procedure that the
    # function does
						</code></pre>
					</section>
					<section>
						<h2>Function</h2>
						<pre><code class="python" data-trim contenteditable>
#!/usr/bin/env python

def incr(myvar):
    myvar += 1

myvar = 5
incr(myvar)
print myvar
						</code></pre>
						<ol>
							<ul>pass, return</ul>
							<ul>default values</ul>
						</ol>
					</section>
					<section>
						<h2>Function II</h2>
						<pre><code class="python" data-trim contenteditable>
#!/usr/bin/env python

def fibonacci(n, a=0, b=1):
    if n == 0:
        result = 0
    elif n == 1:
        result = 1
    else:
        result = fibonacci(n-2) + fibonacci(n-1)

    return result

# get the first 10 fibonacci numbers
for n in range(10):
    print "fibonacci(" + str(n) + "):", fibonacci(n)
						</code></pre>
						<aside class="notes">
							1. fibonacci(0) will return 0 because n == 0 is True
							2. fibonacci(1) will return 1 because n == 1 is True
							3. fibonacci(2) will return the sum of:
								a) fibonacci(0), which is 0; and
								b) fibonacci(1), which is 1
							4. fibonacci(3) will return the sum of:
								a) fibonacci(1), which is 1; and
								b) fibonacci(2), which is the sum of:
								c) fibonacci(0), which is 0; and
								d) fibonacci(1), which is 1
						</aside>
					</section>
					<section>
						<h2>Classes & their methods</h2>
						<ol>
							<ul>define your own data types, e.g. car, str</ul>
						</ol>
						<pre><code class="python" data-trim contenteditable>
>>> original_string = 'Hello, World!'
>>> original_string.upper()
'HELLO, WORLD!'
>>> original_string.lower()
'hello, world!'
						</code></pre>
						<ol>
							<ul>str: upper, lower, find, join, replace, split, strip, []</ul>
							<ul>list: index, pop, reverse, sort, keys, items, find, </ul>
						</ol>
					</section>
					<section>
						<h2>Modules</h2>
						<pre><code class="python" data-trim contenteditable>
from module import name
from module import name as new_name
						</code></pre>
						<ol>
							<ul>math: pi, sin, sqrt</ul>
							<ul>random: uniform, gauss, randint</ul>
							<ul>os: path, ...</ul>
							<ul>sys: argv, ...</ul>
							<ul>numpy, scipy</ul>
						</ol>
					</section>
				</section>

				<section>
					<section>
						<h2>Data Visualization</h2>
						<ul>
							<li>Plotting</li>
							<li>Reading Molecular Structure files</li>
							<li>Visualizing Molecular Structure files</li>
							<li>Visualizing and analyzing MD data</li>
						</ul>
					</section>
					<section>
						<h2>Plotting</h2>
						<ol>
							<ul>gnuplot, R, Python (matplotlib)</ul>
							<ul>datapoints, histogram, barplot, ...</ul>
						</ol>
					</section>
					<section>
						<h2>Reading Molecular Structure files</h2>
						<pre><code class="text" data-trim contenteditable>
HEADER    SIGNALING PROTEIN                       05-MAR-18   6CMO              
TITLE     RHODOPSIN-GI COMPLEX                                                  
COMPND    MOL_ID: 1;                                                            
COMPND   2 MOLECULE: CHIMERA PROTEIN OF SOLUBLE CYTOCHROME B562 AND RHODOPSIN;  
COMPND   3 CHAIN: R;                                                            
COMPND   4 SYNONYM: CYTOCHROME B-562,OPSIN-2;                                   
COMPND   5 ENGINEERED: YES;                                                     
SOURCE    MOL_ID: 1;                                                            
SOURCE   2 ORGANISM_SCIENTIFIC: ESCHERICHIA COLI, HOMO SAPIENS;                 
...
KEYWDS    RHODOPSIN; G PROTEIN; CRYO-EM; STRUCTURE, SIGNALING PROTEIN           
EXPDTA    ELECTRON MICROSCOPY                                                   
AUTHOR    Y.KANG,O.KUYBEDA,P.W.DE WAAL,S.MUKHERJEE,N.VAN EPS,P.DUTKA,X.E.ZHOU,  
...
REVDAT   3   24-OCT-18 6CMO    1       AUTHOR JRNL                              
REMARK   2                                                                      
REMARK   2 RESOLUTION.    4.50 ANGSTROMS.                                       
...
REMARK 465 MISSING RESIDUES                                                     
REMARK 465   M RES C SSSEQI                                                     
REMARK 465     PHE R  -139                                                      
REMARK 465     ALA R  -138                                                      
...
HELIX    1 AA1 GLU R   33  HIS R   65  1                                  33    
...
SHEET    1 AA1 2 ILE R 179  GLU R 181  0                                        
SHEET    2 AA1 2 SER R 186  GLY R 188 -1  O  SER R 186   N  GLU R 181           
...
SSBOND   1 CYS R    2    CYS R  282                          1555   1555  2.03  
...
ATOM      1  N   MET R   1     114.487 130.285 190.440  1.00244.46           N  
ATOM      2  CA  MET R   1     115.476 130.665 189.442  1.00244.46           C  
ATOM      3  C   MET R   1     116.873 130.477 190.021  1.00244.46           C  
ATOM      4  O   MET R   1     117.104 130.728 191.208  1.00244.46           O  
ATOM      5  CB  MET R   1     115.265 132.113 188.988  1.00230.71           C  
ATOM      6  CG  MET R   1     116.089 132.518 187.770  1.00230.71           C  
ATOM      7  SD  MET R   1     115.756 134.193 187.200  1.00230.71           S  
ATOM      8  CE  MET R   1     114.173 133.955 186.397  1.00230.71           C  
...
HETATM10783  C2  BGC A 901      11.313  82.102 123.399  1.00195.30           C 
...
CONECT 6748 8743
...
END
						</code></pre>
					</section>
					<section>
						<h2>Reading Molecular Structure files</h2>
						<ul>
							<li>Title Section</li>
							<li>Header, Compound, Remark Record</li>
							<li>Primary & Secondary Structure Section</li>
							<li>Connectivity Annotation Section</li>
							<li>Crystallographic and Coordinates Section</li>
							<ul>
								<li>CRYST1 Record</li>
								<li>ORIGXn Record</li>
								<li>SCALEn Record</li>
							</ul>
							<li>Coordinate Section</li>
							<ul>
								<li>Model Record</li>
								<li>Atom Record</li>
								<li>TER Record</li>
							</ul>
						</ul>
					</section>
					<section>
						<h2>Reading Molecular Structure files</h2>
						<p>Sequence, Bonds, Angles, Dihedrals, Center of Mass, Radius of Gyration, RMSD, RMSF, ...</p>
					</section>
					<section>
						<h2>Visualizing Molecular Structure files and more</h2>
						<ul>
							<li>wwPDB/Web-viewer</li>
							<li>PyMOL</li>
							<li>VMD</li>
							<li>Chimera</li>
						</ul>
					</section>
					<section>
						<h2>Visualizing and analyzing MD data</h2>
						<p>MDsrv/nglview</p>
						<p>VMD</p>
						<p>MDtraj, pytraj, mdanalysis, biopython, pyrosetta</p>
					</section>
				</section>




<!-- #################################################################################### -->

				<section style="text-align: left;">
					<h1>THE END?</h1>
				</section>

			</div>

		</div>

		<script src="lib/js/head.min.js"></script>
		<script src="js/reveal.js"></script>

		<script>

			// More info https://github.com/hakimel/reveal.js#configuration
			Reveal.initialize({
				controls: true,
				progress: true,
				history: true,
				center: true,

				transition: 'slide', // none/fade/slide/convex/concave/zoom

				// More info https://github.com/hakimel/reveal.js#dependencies
				dependencies: [
					{ src: 'lib/js/classList.js', condition: function() { return !document.body.classList; } },
					{ src: 'plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
					{ src: 'plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
					{ src: 'plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } },
					{ src: 'plugin/search/search.js', async: true },
					{ src: 'plugin/zoom-js/zoom.js', async: true },
					{ src: 'plugin/notes/notes.js', async: true }
				]
			});

		</script>

	</body>
</html>
